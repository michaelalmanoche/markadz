generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Operator {
  id                   Int                 @id @default(autoincrement())
  firstname            String
  middlename           String?
  lastname             String
  contact              String @unique
  region               String
  city                 String
  brgy                 String
  street               String
  birth_date           DateTime
  emergency_firstname  String
  emergency_middlename String
  emergency_lastname   String
  emergency_region     String
  emergency_city       String
  emergency_brgy       String
  emergency_street     String
  emergency_contact    String
  archived             Boolean             @default(false)
  VanDriverOperator    VanDriverOperator[]
}

model Driver {
  id                   Int                @id @default(autoincrement())
  firstname            String
  middlename           String?
  lastname             String
  contact              String         @unique
  region               String
  city                 String
  brgy                 String
  street               String
  license_no           String             @unique
  dl_codes             String[]
  conditions           String[]
  expiration_date      DateTime
  birth_date           DateTime
  emergency_firstname  String
  emergency_middlename String
  emergency_lastname   String
  emergency_region     String
  emergency_city       String
  emergency_brgy       String
  emergency_street     String
  emergency_contact    String
  archived             Boolean            @default(false)
  VanDriverOperator    VanDriverOperator?
  Assignment           Assignment[]
  AssignmentHistory    AssignmentHistory[]
}

model Van {
  id                   Int                 @id @default(autoincrement())
  mv_file_no           String?              
  plate_number         String              @unique
  engine_no            String              @unique
  chassis_no           String              @unique
  denomination         String?
  piston_displacement  String?
  number_of_cylinders  Int?
  fuel                 String?
  make                 String?
  series               String?
  body_type            String?
  body_no              String?
  year_model           Int?
  gross_weight         Float?
  net_weight           Float?
  shipping_weight      Float?
  net_capacity         Float?
  year_last_registered Int?
  expiration_date      DateTime?
  archived             Boolean             @default(false)
  VanDriverOperator    VanDriverOperator[]
}

model VanDriverOperator {
  id          Int          @id @default(autoincrement())
  van_id      Int
  driver_id   Int?         @unique
  operator_id Int
  Assignment  Assignment[]
  Driver      Driver?      @relation(fields: [driver_id], references: [id])
  Operator    Operator     @relation(fields: [operator_id], references: [id])
  Van         Van          @relation(fields: [van_id], references: [id])
}

model Schedule {
  id          Int          @id @default(autoincrement())
  date        DateTime     @unique
  startTime   String
  endTime     String
  assignments Assignment[]
}

model Assignment {
  id                     Int                 @id @default(autoincrement())
  van_driver_operator_id Int
  schedule_id            Int
  assigned_at            DateTime            @default(now())
  status                 AssignmentStatus    @default(idle)
  queued_at              DateTime?
  terminal               TerminalType        @default(terminal1)
  order                  Int                 @default(0)
  queue_order            Int?
  arrivalTime            DateTime?
  departureTime          DateTime?
  temporary_driver_id    Int?                // Add this line
  Schedule               Schedule            @relation(fields: [schedule_id], references: [id])
  VanDriverOperator      VanDriverOperator   @relation(fields: [van_driver_operator_id], references: [id])
  Driver                 Driver?             @relation(fields: [temporary_driver_id], references: [id]) // Add this line
  AssignmentHistory      AssignmentHistory[]
  Queue                  Queue[]
}

model AssignmentHistory {
  id            Int          @id @default(autoincrement())
  assignment_id Int
  event         String
  timestamp     DateTime     @default(now())
  terminal      TerminalType
  temporary_driver_id  Int? 
  Assignment    Assignment   @relation(fields: [assignment_id], references: [id])
  Driver               Driver?      @relation(fields: [temporary_driver_id], references: [id]) // Add this line
}

model Queue {
  id               Int         @id @default(autoincrement())
  assignment_id    Int
  status           QueueStatus
  current_terminal Int?
  queued_at        DateTime?
  Assignment       Assignment  @relation(fields: [assignment_id], references: [id])
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
}

model Terminal {
  id   Int    @id @default(autoincrement())
  name String
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  roleType RoleType
  archived Boolean  @default(false)
}

enum AssignmentStatus {
  idle
  queued
  waiting
  departed
  coming
  arrived
}

enum QueueStatus {
  waiting
  departed
  arrived
}

enum TerminalType {
  terminal1
  terminal2
}

enum RoleType {
  admin
  terminal1
  terminal2
}
